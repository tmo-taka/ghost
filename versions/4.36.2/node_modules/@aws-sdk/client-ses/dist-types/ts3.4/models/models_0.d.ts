import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";

export interface AccountSendingPausedException extends __SmithyException, $MetadataBearer {
    name: "AccountSendingPausedException";
    $fault: "client";
    message?: string;
}

export interface AddHeaderAction {
    
    HeaderName: string | undefined;
    
    HeaderValue: string | undefined;
}
export declare namespace AddHeaderAction {
    
    const filterSensitiveLog: (obj: AddHeaderAction) => any;
}

export interface AlreadyExistsException extends __SmithyException, $MetadataBearer {
    name: "AlreadyExistsException";
    $fault: "client";
    
    Name?: string;
    message?: string;
}
export declare enum BehaviorOnMXFailure {
    RejectMessage = "RejectMessage",
    UseDefaultValue = "UseDefaultValue"
}

export interface Content {
    
    Data: string | undefined;
    
    Charset?: string;
}
export declare namespace Content {
    
    const filterSensitiveLog: (obj: Content) => any;
}

export interface Body {
    
    Text?: Content;
    
    Html?: Content;
}
export declare namespace Body {
    
    const filterSensitiveLog: (obj: Body) => any;
}

export interface BounceAction {
    
    TopicArn?: string;
    
    SmtpReplyCode: string | undefined;
    
    StatusCode?: string;
    
    Message: string | undefined;
    
    Sender: string | undefined;
}
export declare namespace BounceAction {
    
    const filterSensitiveLog: (obj: BounceAction) => any;
}
export declare enum BounceType {
    ContentRejected = "ContentRejected",
    DoesNotExist = "DoesNotExist",
    ExceededQuota = "ExceededQuota",
    MessageTooLarge = "MessageTooLarge",
    TemporaryFailure = "TemporaryFailure",
    Undefined = "Undefined"
}
export declare enum DsnAction {
    DELAYED = "delayed",
    DELIVERED = "delivered",
    EXPANDED = "expanded",
    FAILED = "failed",
    RELAYED = "relayed"
}

export interface ExtensionField {
    
    Name: string | undefined;
    
    Value: string | undefined;
}
export declare namespace ExtensionField {
    
    const filterSensitiveLog: (obj: ExtensionField) => any;
}

export interface RecipientDsnFields {
    
    FinalRecipient?: string;
    
    Action: DsnAction | string | undefined;
    
    RemoteMta?: string;
    
    Status: string | undefined;
    
    DiagnosticCode?: string;
    
    LastAttemptDate?: Date;
    
    ExtensionFields?: ExtensionField[];
}
export declare namespace RecipientDsnFields {
    
    const filterSensitiveLog: (obj: RecipientDsnFields) => any;
}

export interface BouncedRecipientInfo {
    
    Recipient: string | undefined;
    
    RecipientArn?: string;
    
    BounceType?: BounceType | string;
    
    RecipientDsnFields?: RecipientDsnFields;
}
export declare namespace BouncedRecipientInfo {
    
    const filterSensitiveLog: (obj: BouncedRecipientInfo) => any;
}

export interface Destination {
    
    ToAddresses?: string[];
    
    CcAddresses?: string[];
    
    BccAddresses?: string[];
}
export declare namespace Destination {
    
    const filterSensitiveLog: (obj: Destination) => any;
}

export interface MessageTag {
    
    Name: string | undefined;
    
    Value: string | undefined;
}
export declare namespace MessageTag {
    
    const filterSensitiveLog: (obj: MessageTag) => any;
}

export interface BulkEmailDestination {
    
    Destination: Destination | undefined;
    
    ReplacementTags?: MessageTag[];
    
    ReplacementTemplateData?: string;
}
export declare namespace BulkEmailDestination {
    
    const filterSensitiveLog: (obj: BulkEmailDestination) => any;
}
export declare enum BulkEmailStatus {
    AccountDailyQuotaExceeded = "AccountDailyQuotaExceeded",
    AccountSendingPaused = "AccountSendingPaused",
    AccountSuspended = "AccountSuspended",
    AccountThrottled = "AccountThrottled",
    ConfigurationSetDoesNotExist = "ConfigurationSetDoesNotExist",
    ConfigurationSetSendingPaused = "ConfigurationSetSendingPaused",
    Failed = "Failed",
    InvalidParameterValue = "InvalidParameterValue",
    InvalidSendingPoolName = "InvalidSendingPoolName",
    MailFromDomainNotVerified = "MailFromDomainNotVerified",
    MessageRejected = "MessageRejected",
    Success = "Success",
    TemplateDoesNotExist = "TemplateDoesNotExist",
    TransientFailure = "TransientFailure"
}

export interface BulkEmailDestinationStatus {
    
    Status?: BulkEmailStatus | string;
    
    Error?: string;
    
    MessageId?: string;
}
export declare namespace BulkEmailDestinationStatus {
    
    const filterSensitiveLog: (obj: BulkEmailDestinationStatus) => any;
}

export interface CannotDeleteException extends __SmithyException, $MetadataBearer {
    name: "CannotDeleteException";
    $fault: "client";
    
    Name?: string;
    message?: string;
}

export interface CloneReceiptRuleSetRequest {
    
    RuleSetName: string | undefined;
    
    OriginalRuleSetName: string | undefined;
}
export declare namespace CloneReceiptRuleSetRequest {
    
    const filterSensitiveLog: (obj: CloneReceiptRuleSetRequest) => any;
}

export interface CloneReceiptRuleSetResponse {
}
export declare namespace CloneReceiptRuleSetResponse {
    
    const filterSensitiveLog: (obj: CloneReceiptRuleSetResponse) => any;
}

export interface LimitExceededException extends __SmithyException, $MetadataBearer {
    name: "LimitExceededException";
    $fault: "client";
    message?: string;
}

export interface RuleSetDoesNotExistException extends __SmithyException, $MetadataBearer {
    name: "RuleSetDoesNotExistException";
    $fault: "client";
    
    Name?: string;
    message?: string;
}
export declare enum DimensionValueSource {
    EMAIL_HEADER = "emailHeader",
    LINK_TAG = "linkTag",
    MESSAGE_TAG = "messageTag"
}

export interface CloudWatchDimensionConfiguration {
    
    DimensionName: string | undefined;
    
    DimensionValueSource: DimensionValueSource | string | undefined;
    
    DefaultDimensionValue: string | undefined;
}
export declare namespace CloudWatchDimensionConfiguration {
    
    const filterSensitiveLog: (obj: CloudWatchDimensionConfiguration) => any;
}

export interface CloudWatchDestination {
    
    DimensionConfigurations: CloudWatchDimensionConfiguration[] | undefined;
}
export declare namespace CloudWatchDestination {
    
    const filterSensitiveLog: (obj: CloudWatchDestination) => any;
}

export interface ConfigurationSet {
    
    Name: string | undefined;
}
export declare namespace ConfigurationSet {
    
    const filterSensitiveLog: (obj: ConfigurationSet) => any;
}

export interface ConfigurationSetAlreadyExistsException extends __SmithyException, $MetadataBearer {
    name: "ConfigurationSetAlreadyExistsException";
    $fault: "client";
    
    ConfigurationSetName?: string;
    message?: string;
}
export declare enum ConfigurationSetAttribute {
    DELIVERY_OPTIONS = "deliveryOptions",
    EVENT_DESTINATIONS = "eventDestinations",
    REPUTATION_OPTIONS = "reputationOptions",
    TRACKING_OPTIONS = "trackingOptions"
}

export interface ConfigurationSetDoesNotExistException extends __SmithyException, $MetadataBearer {
    name: "ConfigurationSetDoesNotExistException";
    $fault: "client";
    
    ConfigurationSetName?: string;
    message?: string;
}

export interface ConfigurationSetSendingPausedException extends __SmithyException, $MetadataBearer {
    name: "ConfigurationSetSendingPausedException";
    $fault: "client";
    
    ConfigurationSetName?: string;
    message?: string;
}

export interface CreateConfigurationSetRequest {
    
    ConfigurationSet: ConfigurationSet | undefined;
}
export declare namespace CreateConfigurationSetRequest {
    
    const filterSensitiveLog: (obj: CreateConfigurationSetRequest) => any;
}

export interface CreateConfigurationSetResponse {
}
export declare namespace CreateConfigurationSetResponse {
    
    const filterSensitiveLog: (obj: CreateConfigurationSetResponse) => any;
}

export interface InvalidConfigurationSetException extends __SmithyException, $MetadataBearer {
    name: "InvalidConfigurationSetException";
    $fault: "client";
    message?: string;
}

export interface KinesisFirehoseDestination {
    
    IAMRoleARN: string | undefined;
    
    DeliveryStreamARN: string | undefined;
}
export declare namespace KinesisFirehoseDestination {
    
    const filterSensitiveLog: (obj: KinesisFirehoseDestination) => any;
}
export declare enum EventType {
    BOUNCE = "bounce",
    CLICK = "click",
    COMPLAINT = "complaint",
    DELIVERY = "delivery",
    OPEN = "open",
    REJECT = "reject",
    RENDERING_FAILURE = "renderingFailure",
    SEND = "send"
}

export interface SNSDestination {
    
    TopicARN: string | undefined;
}
export declare namespace SNSDestination {
    
    const filterSensitiveLog: (obj: SNSDestination) => any;
}

export interface EventDestination {
    
    Name: string | undefined;
    
    Enabled?: boolean;
    
    MatchingEventTypes: (EventType | string)[] | undefined;
    
    KinesisFirehoseDestination?: KinesisFirehoseDestination;
    
    CloudWatchDestination?: CloudWatchDestination;
    
    SNSDestination?: SNSDestination;
}
export declare namespace EventDestination {
    
    const filterSensitiveLog: (obj: EventDestination) => any;
}

export interface CreateConfigurationSetEventDestinationRequest {
    
    ConfigurationSetName: string | undefined;
    
    EventDestination: EventDestination | undefined;
}
export declare namespace CreateConfigurationSetEventDestinationRequest {
    
    const filterSensitiveLog: (obj: CreateConfigurationSetEventDestinationRequest) => any;
}

export interface CreateConfigurationSetEventDestinationResponse {
}
export declare namespace CreateConfigurationSetEventDestinationResponse {
    
    const filterSensitiveLog: (obj: CreateConfigurationSetEventDestinationResponse) => any;
}

export interface EventDestinationAlreadyExistsException extends __SmithyException, $MetadataBearer {
    name: "EventDestinationAlreadyExistsException";
    $fault: "client";
    
    ConfigurationSetName?: string;
    
    EventDestinationName?: string;
    message?: string;
}

export interface InvalidCloudWatchDestinationException extends __SmithyException, $MetadataBearer {
    name: "InvalidCloudWatchDestinationException";
    $fault: "client";
    
    ConfigurationSetName?: string;
    
    EventDestinationName?: string;
    message?: string;
}

export interface InvalidFirehoseDestinationException extends __SmithyException, $MetadataBearer {
    name: "InvalidFirehoseDestinationException";
    $fault: "client";
    
    ConfigurationSetName?: string;
    
    EventDestinationName?: string;
    message?: string;
}

export interface InvalidSNSDestinationException extends __SmithyException, $MetadataBearer {
    name: "InvalidSNSDestinationException";
    $fault: "client";
    
    ConfigurationSetName?: string;
    
    EventDestinationName?: string;
    message?: string;
}

export interface TrackingOptions {
    
    CustomRedirectDomain?: string;
}
export declare namespace TrackingOptions {
    
    const filterSensitiveLog: (obj: TrackingOptions) => any;
}

export interface CreateConfigurationSetTrackingOptionsRequest {
    
    ConfigurationSetName: string | undefined;
    
    TrackingOptions: TrackingOptions | undefined;
}
export declare namespace CreateConfigurationSetTrackingOptionsRequest {
    
    const filterSensitiveLog: (obj: CreateConfigurationSetTrackingOptionsRequest) => any;
}

export interface CreateConfigurationSetTrackingOptionsResponse {
}
export declare namespace CreateConfigurationSetTrackingOptionsResponse {
    
    const filterSensitiveLog: (obj: CreateConfigurationSetTrackingOptionsResponse) => any;
}

export interface InvalidTrackingOptionsException extends __SmithyException, $MetadataBearer {
    name: "InvalidTrackingOptionsException";
    $fault: "client";
    message?: string;
}

export interface TrackingOptionsAlreadyExistsException extends __SmithyException, $MetadataBearer {
    name: "TrackingOptionsAlreadyExistsException";
    $fault: "client";
    
    ConfigurationSetName?: string;
    message?: string;
}

export interface CreateCustomVerificationEmailTemplateRequest {
    
    TemplateName: string | undefined;
    
    FromEmailAddress: string | undefined;
    
    TemplateSubject: string | undefined;
    
    TemplateContent: string | undefined;
    
    SuccessRedirectionURL: string | undefined;
    
    FailureRedirectionURL: string | undefined;
}
export declare namespace CreateCustomVerificationEmailTemplateRequest {
    
    const filterSensitiveLog: (obj: CreateCustomVerificationEmailTemplateRequest) => any;
}

export interface CustomVerificationEmailInvalidContentException extends __SmithyException, $MetadataBearer {
    name: "CustomVerificationEmailInvalidContentException";
    $fault: "client";
    message?: string;
}

export interface CustomVerificationEmailTemplateAlreadyExistsException extends __SmithyException, $MetadataBearer {
    name: "CustomVerificationEmailTemplateAlreadyExistsException";
    $fault: "client";
    
    CustomVerificationEmailTemplateName?: string;
    message?: string;
}

export interface FromEmailAddressNotVerifiedException extends __SmithyException, $MetadataBearer {
    name: "FromEmailAddressNotVerifiedException";
    $fault: "client";
    
    FromEmailAddress?: string;
    message?: string;
}
export declare enum ReceiptFilterPolicy {
    Allow = "Allow",
    Block = "Block"
}

export interface ReceiptIpFilter {
    
    Policy: ReceiptFilterPolicy | string | undefined;
    
    Cidr: string | undefined;
}
export declare namespace ReceiptIpFilter {
    
    const filterSensitiveLog: (obj: ReceiptIpFilter) => any;
}

export interface ReceiptFilter {
    
    Name: string | undefined;
    
    IpFilter: ReceiptIpFilter | undefined;
}
export declare namespace ReceiptFilter {
    
    const filterSensitiveLog: (obj: ReceiptFilter) => any;
}

export interface CreateReceiptFilterRequest {
    
    Filter: ReceiptFilter | undefined;
}
export declare namespace CreateReceiptFilterRequest {
    
    const filterSensitiveLog: (obj: CreateReceiptFilterRequest) => any;
}

export interface CreateReceiptFilterResponse {
}
export declare namespace CreateReceiptFilterResponse {
    
    const filterSensitiveLog: (obj: CreateReceiptFilterResponse) => any;
}
export declare type InvocationType = "Event" | "RequestResponse";

export interface LambdaAction {
    
    TopicArn?: string;
    
    FunctionArn: string | undefined;
    
    InvocationType?: InvocationType | string;
}
export declare namespace LambdaAction {
    
    const filterSensitiveLog: (obj: LambdaAction) => any;
}

export interface S3Action {
    
    TopicArn?: string;
    
    BucketName: string | undefined;
    
    ObjectKeyPrefix?: string;
    
    KmsKeyArn?: string;
}
export declare namespace S3Action {
    
    const filterSensitiveLog: (obj: S3Action) => any;
}
export declare enum SNSActionEncoding {
    Base64 = "Base64",
    UTF8 = "UTF-8"
}

export interface SNSAction {
    
    TopicArn: string | undefined;
    
    Encoding?: SNSActionEncoding | string;
}
export declare namespace SNSAction {
    
    const filterSensitiveLog: (obj: SNSAction) => any;
}
export declare enum StopScope {
    RULE_SET = "RuleSet"
}

export interface StopAction {
    
    Scope: StopScope | string | undefined;
    
    TopicArn?: string;
}
export declare namespace StopAction {
    
    const filterSensitiveLog: (obj: StopAction) => any;
}

export interface WorkmailAction {
    
    TopicArn?: string;
    
    OrganizationArn: string | undefined;
}
export declare namespace WorkmailAction {
    
    const filterSensitiveLog: (obj: WorkmailAction) => any;
}

export interface ReceiptAction {
    
    S3Action?: S3Action;
    
    BounceAction?: BounceAction;
    
    WorkmailAction?: WorkmailAction;
    
    LambdaAction?: LambdaAction;
    
    StopAction?: StopAction;
    
    AddHeaderAction?: AddHeaderAction;
    
    SNSAction?: SNSAction;
}
export declare namespace ReceiptAction {
    
    const filterSensitiveLog: (obj: ReceiptAction) => any;
}
export declare enum TlsPolicy {
    Optional = "Optional",
    Require = "Require"
}

export interface ReceiptRule {
    
    Name: string | undefined;
    
    Enabled?: boolean;
    
    TlsPolicy?: TlsPolicy | string;
    
    Recipients?: string[];
    
    Actions?: ReceiptAction[];
    
    ScanEnabled?: boolean;
}
export declare namespace ReceiptRule {
    
    const filterSensitiveLog: (obj: ReceiptRule) => any;
}

export interface CreateReceiptRuleRequest {
    
    RuleSetName: string | undefined;
    
    After?: string;
    
    Rule: ReceiptRule | undefined;
}
export declare namespace CreateReceiptRuleRequest {
    
    const filterSensitiveLog: (obj: CreateReceiptRuleRequest) => any;
}

export interface CreateReceiptRuleResponse {
}
export declare namespace CreateReceiptRuleResponse {
    
    const filterSensitiveLog: (obj: CreateReceiptRuleResponse) => any;
}

export interface InvalidLambdaFunctionException extends __SmithyException, $MetadataBearer {
    name: "InvalidLambdaFunctionException";
    $fault: "client";
    
    FunctionArn?: string;
    message?: string;
}

export interface InvalidS3ConfigurationException extends __SmithyException, $MetadataBearer {
    name: "InvalidS3ConfigurationException";
    $fault: "client";
    
    Bucket?: string;
    message?: string;
}

export interface InvalidSnsTopicException extends __SmithyException, $MetadataBearer {
    name: "InvalidSnsTopicException";
    $fault: "client";
    
    Topic?: string;
    message?: string;
}

export interface RuleDoesNotExistException extends __SmithyException, $MetadataBearer {
    name: "RuleDoesNotExistException";
    $fault: "client";
    
    Name?: string;
    message?: string;
}

export interface CreateReceiptRuleSetRequest {
    
    RuleSetName: string | undefined;
}
export declare namespace CreateReceiptRuleSetRequest {
    
    const filterSensitiveLog: (obj: CreateReceiptRuleSetRequest) => any;
}

export interface CreateReceiptRuleSetResponse {
}
export declare namespace CreateReceiptRuleSetResponse {
    
    const filterSensitiveLog: (obj: CreateReceiptRuleSetResponse) => any;
}

export interface Template {
    
    TemplateName: string | undefined;
    
    SubjectPart?: string;
    
    TextPart?: string;
    
    HtmlPart?: string;
}
export declare namespace Template {
    
    const filterSensitiveLog: (obj: Template) => any;
}

export interface CreateTemplateRequest {
    
    Template: Template | undefined;
}
export declare namespace CreateTemplateRequest {
    
    const filterSensitiveLog: (obj: CreateTemplateRequest) => any;
}
export interface CreateTemplateResponse {
}
export declare namespace CreateTemplateResponse {
    
    const filterSensitiveLog: (obj: CreateTemplateResponse) => any;
}

export interface InvalidTemplateException extends __SmithyException, $MetadataBearer {
    name: "InvalidTemplateException";
    $fault: "client";
    TemplateName?: string;
    message?: string;
}
export declare enum CustomMailFromStatus {
    Failed = "Failed",
    Pending = "Pending",
    Success = "Success",
    TemporaryFailure = "TemporaryFailure"
}

export interface CustomVerificationEmailTemplate {
    
    TemplateName?: string;
    
    FromEmailAddress?: string;
    
    TemplateSubject?: string;
    
    SuccessRedirectionURL?: string;
    
    FailureRedirectionURL?: string;
}
export declare namespace CustomVerificationEmailTemplate {
    
    const filterSensitiveLog: (obj: CustomVerificationEmailTemplate) => any;
}

export interface CustomVerificationEmailTemplateDoesNotExistException extends __SmithyException, $MetadataBearer {
    name: "CustomVerificationEmailTemplateDoesNotExistException";
    $fault: "client";
    
    CustomVerificationEmailTemplateName?: string;
    message?: string;
}

export interface DeleteConfigurationSetRequest {
    
    ConfigurationSetName: string | undefined;
}
export declare namespace DeleteConfigurationSetRequest {
    
    const filterSensitiveLog: (obj: DeleteConfigurationSetRequest) => any;
}

export interface DeleteConfigurationSetResponse {
}
export declare namespace DeleteConfigurationSetResponse {
    
    const filterSensitiveLog: (obj: DeleteConfigurationSetResponse) => any;
}

export interface DeleteConfigurationSetEventDestinationRequest {
    
    ConfigurationSetName: string | undefined;
    
    EventDestinationName: string | undefined;
}
export declare namespace DeleteConfigurationSetEventDestinationRequest {
    
    const filterSensitiveLog: (obj: DeleteConfigurationSetEventDestinationRequest) => any;
}

export interface DeleteConfigurationSetEventDestinationResponse {
}
export declare namespace DeleteConfigurationSetEventDestinationResponse {
    
    const filterSensitiveLog: (obj: DeleteConfigurationSetEventDestinationResponse) => any;
}

export interface EventDestinationDoesNotExistException extends __SmithyException, $MetadataBearer {
    name: "EventDestinationDoesNotExistException";
    $fault: "client";
    
    ConfigurationSetName?: string;
    
    EventDestinationName?: string;
    message?: string;
}

export interface DeleteConfigurationSetTrackingOptionsRequest {
    
    ConfigurationSetName: string | undefined;
}
export declare namespace DeleteConfigurationSetTrackingOptionsRequest {
    
    const filterSensitiveLog: (obj: DeleteConfigurationSetTrackingOptionsRequest) => any;
}

export interface DeleteConfigurationSetTrackingOptionsResponse {
}
export declare namespace DeleteConfigurationSetTrackingOptionsResponse {
    
    const filterSensitiveLog: (obj: DeleteConfigurationSetTrackingOptionsResponse) => any;
}

export interface TrackingOptionsDoesNotExistException extends __SmithyException, $MetadataBearer {
    name: "TrackingOptionsDoesNotExistException";
    $fault: "client";
    
    ConfigurationSetName?: string;
    message?: string;
}

export interface DeleteCustomVerificationEmailTemplateRequest {
    
    TemplateName: string | undefined;
}
export declare namespace DeleteCustomVerificationEmailTemplateRequest {
    
    const filterSensitiveLog: (obj: DeleteCustomVerificationEmailTemplateRequest) => any;
}

export interface DeleteIdentityRequest {
    
    Identity: string | undefined;
}
export declare namespace DeleteIdentityRequest {
    
    const filterSensitiveLog: (obj: DeleteIdentityRequest) => any;
}

export interface DeleteIdentityResponse {
}
export declare namespace DeleteIdentityResponse {
    
    const filterSensitiveLog: (obj: DeleteIdentityResponse) => any;
}

export interface DeleteIdentityPolicyRequest {
    
    Identity: string | undefined;
    
    PolicyName: string | undefined;
}
export declare namespace DeleteIdentityPolicyRequest {
    
    const filterSensitiveLog: (obj: DeleteIdentityPolicyRequest) => any;
}

export interface DeleteIdentityPolicyResponse {
}
export declare namespace DeleteIdentityPolicyResponse {
    
    const filterSensitiveLog: (obj: DeleteIdentityPolicyResponse) => any;
}

export interface DeleteReceiptFilterRequest {
    
    FilterName: string | undefined;
}
export declare namespace DeleteReceiptFilterRequest {
    
    const filterSensitiveLog: (obj: DeleteReceiptFilterRequest) => any;
}

export interface DeleteReceiptFilterResponse {
}
export declare namespace DeleteReceiptFilterResponse {
    
    const filterSensitiveLog: (obj: DeleteReceiptFilterResponse) => any;
}

export interface DeleteReceiptRuleRequest {
    
    RuleSetName: string | undefined;
    
    RuleName: string | undefined;
}
export declare namespace DeleteReceiptRuleRequest {
    
    const filterSensitiveLog: (obj: DeleteReceiptRuleRequest) => any;
}

export interface DeleteReceiptRuleResponse {
}
export declare namespace DeleteReceiptRuleResponse {
    
    const filterSensitiveLog: (obj: DeleteReceiptRuleResponse) => any;
}

export interface DeleteReceiptRuleSetRequest {
    
    RuleSetName: string | undefined;
}
export declare namespace DeleteReceiptRuleSetRequest {
    
    const filterSensitiveLog: (obj: DeleteReceiptRuleSetRequest) => any;
}

export interface DeleteReceiptRuleSetResponse {
}
export declare namespace DeleteReceiptRuleSetResponse {
    
    const filterSensitiveLog: (obj: DeleteReceiptRuleSetResponse) => any;
}

export interface DeleteTemplateRequest {
    
    TemplateName: string | undefined;
}
export declare namespace DeleteTemplateRequest {
    
    const filterSensitiveLog: (obj: DeleteTemplateRequest) => any;
}
export interface DeleteTemplateResponse {
}
export declare namespace DeleteTemplateResponse {
    
    const filterSensitiveLog: (obj: DeleteTemplateResponse) => any;
}

export interface DeleteVerifiedEmailAddressRequest {
    
    EmailAddress: string | undefined;
}
export declare namespace DeleteVerifiedEmailAddressRequest {
    
    const filterSensitiveLog: (obj: DeleteVerifiedEmailAddressRequest) => any;
}

export interface DeliveryOptions {
    
    TlsPolicy?: TlsPolicy | string;
}
export declare namespace DeliveryOptions {
    
    const filterSensitiveLog: (obj: DeliveryOptions) => any;
}

export interface DescribeActiveReceiptRuleSetRequest {
}
export declare namespace DescribeActiveReceiptRuleSetRequest {
    
    const filterSensitiveLog: (obj: DescribeActiveReceiptRuleSetRequest) => any;
}

export interface ReceiptRuleSetMetadata {
    
    Name?: string;
    
    CreatedTimestamp?: Date;
}
export declare namespace ReceiptRuleSetMetadata {
    
    const filterSensitiveLog: (obj: ReceiptRuleSetMetadata) => any;
}

export interface DescribeActiveReceiptRuleSetResponse {
    
    Metadata?: ReceiptRuleSetMetadata;
    
    Rules?: ReceiptRule[];
}
export declare namespace DescribeActiveReceiptRuleSetResponse {
    
    const filterSensitiveLog: (obj: DescribeActiveReceiptRuleSetResponse) => any;
}

export interface DescribeConfigurationSetRequest {
    
    ConfigurationSetName: string | undefined;
    
    ConfigurationSetAttributeNames?: (ConfigurationSetAttribute | string)[];
}
export declare namespace DescribeConfigurationSetRequest {
    
    const filterSensitiveLog: (obj: DescribeConfigurationSetRequest) => any;
}

export interface ReputationOptions {
    
    SendingEnabled?: boolean;
    
    ReputationMetricsEnabled?: boolean;
    
    LastFreshStart?: Date;
}
export declare namespace ReputationOptions {
    
    const filterSensitiveLog: (obj: ReputationOptions) => any;
}

export interface DescribeConfigurationSetResponse {
    
    ConfigurationSet?: ConfigurationSet;
    
    EventDestinations?: EventDestination[];
    
    TrackingOptions?: TrackingOptions;
    
    DeliveryOptions?: DeliveryOptions;
    
    ReputationOptions?: ReputationOptions;
}
export declare namespace DescribeConfigurationSetResponse {
    
    const filterSensitiveLog: (obj: DescribeConfigurationSetResponse) => any;
}

export interface DescribeReceiptRuleRequest {
    
    RuleSetName: string | undefined;
    
    RuleName: string | undefined;
}
export declare namespace DescribeReceiptRuleRequest {
    
    const filterSensitiveLog: (obj: DescribeReceiptRuleRequest) => any;
}

export interface DescribeReceiptRuleResponse {
    
    Rule?: ReceiptRule;
}
export declare namespace DescribeReceiptRuleResponse {
    
    const filterSensitiveLog: (obj: DescribeReceiptRuleResponse) => any;
}

export interface DescribeReceiptRuleSetRequest {
    
    RuleSetName: string | undefined;
}
export declare namespace DescribeReceiptRuleSetRequest {
    
    const filterSensitiveLog: (obj: DescribeReceiptRuleSetRequest) => any;
}

export interface DescribeReceiptRuleSetResponse {
    
    Metadata?: ReceiptRuleSetMetadata;
    
    Rules?: ReceiptRule[];
}
export declare namespace DescribeReceiptRuleSetResponse {
    
    const filterSensitiveLog: (obj: DescribeReceiptRuleSetResponse) => any;
}
export declare type VerificationStatus = "Failed" | "NotStarted" | "Pending" | "Success" | "TemporaryFailure";

export interface IdentityDkimAttributes {
    
    DkimEnabled: boolean | undefined;
    
    DkimVerificationStatus: VerificationStatus | string | undefined;
    
    DkimTokens?: string[];
}
export declare namespace IdentityDkimAttributes {
    
    const filterSensitiveLog: (obj: IdentityDkimAttributes) => any;
}

export interface GetAccountSendingEnabledResponse {
    
    Enabled?: boolean;
}
export declare namespace GetAccountSendingEnabledResponse {
    
    const filterSensitiveLog: (obj: GetAccountSendingEnabledResponse) => any;
}

export interface GetCustomVerificationEmailTemplateRequest {
    
    TemplateName: string | undefined;
}
export declare namespace GetCustomVerificationEmailTemplateRequest {
    
    const filterSensitiveLog: (obj: GetCustomVerificationEmailTemplateRequest) => any;
}

export interface GetCustomVerificationEmailTemplateResponse {
    
    TemplateName?: string;
    
    FromEmailAddress?: string;
    
    TemplateSubject?: string;
    
    TemplateContent?: string;
    
    SuccessRedirectionURL?: string;
    
    FailureRedirectionURL?: string;
}
export declare namespace GetCustomVerificationEmailTemplateResponse {
    
    const filterSensitiveLog: (obj: GetCustomVerificationEmailTemplateResponse) => any;
}

export interface GetIdentityDkimAttributesRequest {
    
    Identities: string[] | undefined;
}
export declare namespace GetIdentityDkimAttributesRequest {
    
    const filterSensitiveLog: (obj: GetIdentityDkimAttributesRequest) => any;
}

export interface GetIdentityDkimAttributesResponse {
    
    DkimAttributes: {
        [key: string]: IdentityDkimAttributes;
    } | undefined;
}
export declare namespace GetIdentityDkimAttributesResponse {
    
    const filterSensitiveLog: (obj: GetIdentityDkimAttributesResponse) => any;
}

export interface GetIdentityMailFromDomainAttributesRequest {
    
    Identities: string[] | undefined;
}
export declare namespace GetIdentityMailFromDomainAttributesRequest {
    
    const filterSensitiveLog: (obj: GetIdentityMailFromDomainAttributesRequest) => any;
}

export interface IdentityMailFromDomainAttributes {
    
    MailFromDomain: string | undefined;
    
    MailFromDomainStatus: CustomMailFromStatus | string | undefined;
    
    BehaviorOnMXFailure: BehaviorOnMXFailure | string | undefined;
}
export declare namespace IdentityMailFromDomainAttributes {
    
    const filterSensitiveLog: (obj: IdentityMailFromDomainAttributes) => any;
}

export interface GetIdentityMailFromDomainAttributesResponse {
    
    MailFromDomainAttributes: {
        [key: string]: IdentityMailFromDomainAttributes;
    } | undefined;
}
export declare namespace GetIdentityMailFromDomainAttributesResponse {
    
    const filterSensitiveLog: (obj: GetIdentityMailFromDomainAttributesResponse) => any;
}

export interface GetIdentityNotificationAttributesRequest {
    
    Identities: string[] | undefined;
}
export declare namespace GetIdentityNotificationAttributesRequest {
    
    const filterSensitiveLog: (obj: GetIdentityNotificationAttributesRequest) => any;
}

export interface IdentityNotificationAttributes {
    
    BounceTopic: string | undefined;
    
    ComplaintTopic: string | undefined;
    
    DeliveryTopic: string | undefined;
    
    ForwardingEnabled: boolean | undefined;
    
    HeadersInBounceNotificationsEnabled?: boolean;
    
    HeadersInComplaintNotificationsEnabled?: boolean;
    
    HeadersInDeliveryNotificationsEnabled?: boolean;
}
export declare namespace IdentityNotificationAttributes {
    
    const filterSensitiveLog: (obj: IdentityNotificationAttributes) => any;
}

export interface GetIdentityNotificationAttributesResponse {
    
    NotificationAttributes: {
        [key: string]: IdentityNotificationAttributes;
    } | undefined;
}
export declare namespace GetIdentityNotificationAttributesResponse {
    
    const filterSensitiveLog: (obj: GetIdentityNotificationAttributesResponse) => any;
}

export interface GetIdentityPoliciesRequest {
    
    Identity: string | undefined;
    
    PolicyNames: string[] | undefined;
}
export declare namespace GetIdentityPoliciesRequest {
    
    const filterSensitiveLog: (obj: GetIdentityPoliciesRequest) => any;
}

export interface GetIdentityPoliciesResponse {
    
    Policies: {
        [key: string]: string;
    } | undefined;
}
export declare namespace GetIdentityPoliciesResponse {
    
    const filterSensitiveLog: (obj: GetIdentityPoliciesResponse) => any;
}

export interface GetIdentityVerificationAttributesRequest {
    
    Identities: string[] | undefined;
}
export declare namespace GetIdentityVerificationAttributesRequest {
    
    const filterSensitiveLog: (obj: GetIdentityVerificationAttributesRequest) => any;
}

export interface IdentityVerificationAttributes {
    
    VerificationStatus: VerificationStatus | string | undefined;
    
    VerificationToken?: string;
}
export declare namespace IdentityVerificationAttributes {
    
    const filterSensitiveLog: (obj: IdentityVerificationAttributes) => any;
}

export interface GetIdentityVerificationAttributesResponse {
    
    VerificationAttributes: {
        [key: string]: IdentityVerificationAttributes;
    } | undefined;
}
export declare namespace GetIdentityVerificationAttributesResponse {
    
    const filterSensitiveLog: (obj: GetIdentityVerificationAttributesResponse) => any;
}

export interface GetSendQuotaResponse {
    
    Max24HourSend?: number;
    
    MaxSendRate?: number;
    
    SentLast24Hours?: number;
}
export declare namespace GetSendQuotaResponse {
    
    const filterSensitiveLog: (obj: GetSendQuotaResponse) => any;
}

export interface SendDataPoint {
    
    Timestamp?: Date;
    
    DeliveryAttempts?: number;
    
    Bounces?: number;
    
    Complaints?: number;
    
    Rejects?: number;
}
export declare namespace SendDataPoint {
    
    const filterSensitiveLog: (obj: SendDataPoint) => any;
}

export interface GetSendStatisticsResponse {
    
    SendDataPoints?: SendDataPoint[];
}
export declare namespace GetSendStatisticsResponse {
    
    const filterSensitiveLog: (obj: GetSendStatisticsResponse) => any;
}
export interface GetTemplateRequest {
    
    TemplateName: string | undefined;
}
export declare namespace GetTemplateRequest {
    
    const filterSensitiveLog: (obj: GetTemplateRequest) => any;
}
export interface GetTemplateResponse {
    
    Template?: Template;
}
export declare namespace GetTemplateResponse {
    
    const filterSensitiveLog: (obj: GetTemplateResponse) => any;
}

export interface TemplateDoesNotExistException extends __SmithyException, $MetadataBearer {
    name: "TemplateDoesNotExistException";
    $fault: "client";
    TemplateName?: string;
    message?: string;
}
export declare type IdentityType = "Domain" | "EmailAddress";

export interface InvalidDeliveryOptionsException extends __SmithyException, $MetadataBearer {
    name: "InvalidDeliveryOptionsException";
    $fault: "client";
    message?: string;
}

export interface InvalidPolicyException extends __SmithyException, $MetadataBearer {
    name: "InvalidPolicyException";
    $fault: "client";
    message?: string;
}

export interface InvalidRenderingParameterException extends __SmithyException, $MetadataBearer {
    name: "InvalidRenderingParameterException";
    $fault: "client";
    TemplateName?: string;
    message?: string;
}

export interface ListConfigurationSetsRequest {
    
    NextToken?: string;
    
    MaxItems?: number;
}
export declare namespace ListConfigurationSetsRequest {
    
    const filterSensitiveLog: (obj: ListConfigurationSetsRequest) => any;
}

export interface ListConfigurationSetsResponse {
    
    ConfigurationSets?: ConfigurationSet[];
    
    NextToken?: string;
}
export declare namespace ListConfigurationSetsResponse {
    
    const filterSensitiveLog: (obj: ListConfigurationSetsResponse) => any;
}

export interface ListCustomVerificationEmailTemplatesRequest {
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListCustomVerificationEmailTemplatesRequest {
    
    const filterSensitiveLog: (obj: ListCustomVerificationEmailTemplatesRequest) => any;
}

export interface ListCustomVerificationEmailTemplatesResponse {
    
    CustomVerificationEmailTemplates?: CustomVerificationEmailTemplate[];
    
    NextToken?: string;
}
export declare namespace ListCustomVerificationEmailTemplatesResponse {
    
    const filterSensitiveLog: (obj: ListCustomVerificationEmailTemplatesResponse) => any;
}

export interface ListIdentitiesRequest {
    
    IdentityType?: IdentityType | string;
    
    NextToken?: string;
    
    MaxItems?: number;
}
export declare namespace ListIdentitiesRequest {
    
    const filterSensitiveLog: (obj: ListIdentitiesRequest) => any;
}

export interface ListIdentitiesResponse {
    
    Identities: string[] | undefined;
    
    NextToken?: string;
}
export declare namespace ListIdentitiesResponse {
    
    const filterSensitiveLog: (obj: ListIdentitiesResponse) => any;
}

export interface ListIdentityPoliciesRequest {
    
    Identity: string | undefined;
}
export declare namespace ListIdentityPoliciesRequest {
    
    const filterSensitiveLog: (obj: ListIdentityPoliciesRequest) => any;
}

export interface ListIdentityPoliciesResponse {
    
    PolicyNames: string[] | undefined;
}
export declare namespace ListIdentityPoliciesResponse {
    
    const filterSensitiveLog: (obj: ListIdentityPoliciesResponse) => any;
}

export interface ListReceiptFiltersRequest {
}
export declare namespace ListReceiptFiltersRequest {
    
    const filterSensitiveLog: (obj: ListReceiptFiltersRequest) => any;
}

export interface ListReceiptFiltersResponse {
    
    Filters?: ReceiptFilter[];
}
export declare namespace ListReceiptFiltersResponse {
    
    const filterSensitiveLog: (obj: ListReceiptFiltersResponse) => any;
}

export interface ListReceiptRuleSetsRequest {
    
    NextToken?: string;
}
export declare namespace ListReceiptRuleSetsRequest {
    
    const filterSensitiveLog: (obj: ListReceiptRuleSetsRequest) => any;
}

export interface ListReceiptRuleSetsResponse {
    
    RuleSets?: ReceiptRuleSetMetadata[];
    
    NextToken?: string;
}
export declare namespace ListReceiptRuleSetsResponse {
    
    const filterSensitiveLog: (obj: ListReceiptRuleSetsResponse) => any;
}
export interface ListTemplatesRequest {
    
    NextToken?: string;
    
    MaxItems?: number;
}
export declare namespace ListTemplatesRequest {
    
    const filterSensitiveLog: (obj: ListTemplatesRequest) => any;
}

export interface TemplateMetadata {
    
    Name?: string;
    
    CreatedTimestamp?: Date;
}
export declare namespace TemplateMetadata {
    
    const filterSensitiveLog: (obj: TemplateMetadata) => any;
}
export interface ListTemplatesResponse {
    
    TemplatesMetadata?: TemplateMetadata[];
    
    NextToken?: string;
}
export declare namespace ListTemplatesResponse {
    
    const filterSensitiveLog: (obj: ListTemplatesResponse) => any;
}

export interface ListVerifiedEmailAddressesResponse {
    
    VerifiedEmailAddresses?: string[];
}
export declare namespace ListVerifiedEmailAddressesResponse {
    
    const filterSensitiveLog: (obj: ListVerifiedEmailAddressesResponse) => any;
}

export interface MailFromDomainNotVerifiedException extends __SmithyException, $MetadataBearer {
    name: "MailFromDomainNotVerifiedException";
    $fault: "client";
    message?: string;
}

export interface Message {
    
    Subject: Content | undefined;
    
    Body: Body | undefined;
}
export declare namespace Message {
    
    const filterSensitiveLog: (obj: Message) => any;
}

export interface MessageDsn {
    
    ReportingMta: string | undefined;
    
    ArrivalDate?: Date;
    
    ExtensionFields?: ExtensionField[];
}
export declare namespace MessageDsn {
    
    const filterSensitiveLog: (obj: MessageDsn) => any;
}

export interface MessageRejected extends __SmithyException, $MetadataBearer {
    name: "MessageRejected";
    $fault: "client";
    message?: string;
}

export interface MissingRenderingAttributeException extends __SmithyException, $MetadataBearer {
    name: "MissingRenderingAttributeException";
    $fault: "client";
    TemplateName?: string;
    message?: string;
}
export declare type NotificationType = "Bounce" | "Complaint" | "Delivery";

export interface ProductionAccessNotGrantedException extends __SmithyException, $MetadataBearer {
    name: "ProductionAccessNotGrantedException";
    $fault: "client";
    message?: string;
}

export interface PutConfigurationSetDeliveryOptionsRequest {
    
    ConfigurationSetName: string | undefined;
    
    DeliveryOptions?: DeliveryOptions;
}
export declare namespace PutConfigurationSetDeliveryOptionsRequest {
    
    const filterSensitiveLog: (obj: PutConfigurationSetDeliveryOptionsRequest) => any;
}

export interface PutConfigurationSetDeliveryOptionsResponse {
}
export declare namespace PutConfigurationSetDeliveryOptionsResponse {
    
    const filterSensitiveLog: (obj: PutConfigurationSetDeliveryOptionsResponse) => any;
}

export interface PutIdentityPolicyRequest {
    
    Identity: string | undefined;
    
    PolicyName: string | undefined;
    
    Policy: string | undefined;
}
export declare namespace PutIdentityPolicyRequest {
    
    const filterSensitiveLog: (obj: PutIdentityPolicyRequest) => any;
}

export interface PutIdentityPolicyResponse {
}
export declare namespace PutIdentityPolicyResponse {
    
    const filterSensitiveLog: (obj: PutIdentityPolicyResponse) => any;
}

export interface RawMessage {
    
    Data: Uint8Array | undefined;
}
export declare namespace RawMessage {
    
    const filterSensitiveLog: (obj: RawMessage) => any;
}

export interface ReorderReceiptRuleSetRequest {
    
    RuleSetName: string | undefined;
    
    RuleNames: string[] | undefined;
}
export declare namespace ReorderReceiptRuleSetRequest {
    
    const filterSensitiveLog: (obj: ReorderReceiptRuleSetRequest) => any;
}

export interface ReorderReceiptRuleSetResponse {
}
export declare namespace ReorderReceiptRuleSetResponse {
    
    const filterSensitiveLog: (obj: ReorderReceiptRuleSetResponse) => any;
}

export interface SendBounceRequest {
    
    OriginalMessageId: string | undefined;
    
    BounceSender: string | undefined;
    
    Explanation?: string;
    
    MessageDsn?: MessageDsn;
    
    BouncedRecipientInfoList: BouncedRecipientInfo[] | undefined;
    
    BounceSenderArn?: string;
}
export declare namespace SendBounceRequest {
    
    const filterSensitiveLog: (obj: SendBounceRequest) => any;
}

export interface SendBounceResponse {
    
    MessageId?: string;
}
export declare namespace SendBounceResponse {
    
    const filterSensitiveLog: (obj: SendBounceResponse) => any;
}

export interface SendBulkTemplatedEmailRequest {
    
    Source: string | undefined;
    
    SourceArn?: string;
    
    ReplyToAddresses?: string[];
    
    ReturnPath?: string;
    
    ReturnPathArn?: string;
    
    ConfigurationSetName?: string;
    
    DefaultTags?: MessageTag[];
    
    Template: string | undefined;
    
    TemplateArn?: string;
    
    DefaultTemplateData?: string;
    
    Destinations: BulkEmailDestination[] | undefined;
}
export declare namespace SendBulkTemplatedEmailRequest {
    
    const filterSensitiveLog: (obj: SendBulkTemplatedEmailRequest) => any;
}
export interface SendBulkTemplatedEmailResponse {
    
    Status: BulkEmailDestinationStatus[] | undefined;
}
export declare namespace SendBulkTemplatedEmailResponse {
    
    const filterSensitiveLog: (obj: SendBulkTemplatedEmailResponse) => any;
}

export interface SendCustomVerificationEmailRequest {
    
    EmailAddress: string | undefined;
    
    TemplateName: string | undefined;
    
    ConfigurationSetName?: string;
}
export declare namespace SendCustomVerificationEmailRequest {
    
    const filterSensitiveLog: (obj: SendCustomVerificationEmailRequest) => any;
}

export interface SendCustomVerificationEmailResponse {
    
    MessageId?: string;
}
export declare namespace SendCustomVerificationEmailResponse {
    
    const filterSensitiveLog: (obj: SendCustomVerificationEmailResponse) => any;
}

export interface SendEmailRequest {
    
    Source: string | undefined;
    
    Destination: Destination | undefined;
    
    Message: Message | undefined;
    
    ReplyToAddresses?: string[];
    
    ReturnPath?: string;
    
    SourceArn?: string;
    
    ReturnPathArn?: string;
    
    Tags?: MessageTag[];
    
    ConfigurationSetName?: string;
}
export declare namespace SendEmailRequest {
    
    const filterSensitiveLog: (obj: SendEmailRequest) => any;
}

export interface SendEmailResponse {
    
    MessageId: string | undefined;
}
export declare namespace SendEmailResponse {
    
    const filterSensitiveLog: (obj: SendEmailResponse) => any;
}

export interface SendRawEmailRequest {
    
    Source?: string;
    
    Destinations?: string[];
    
    RawMessage: RawMessage | undefined;
    
    FromArn?: string;
    
    SourceArn?: string;
    
    ReturnPathArn?: string;
    
    Tags?: MessageTag[];
    
    ConfigurationSetName?: string;
}
export declare namespace SendRawEmailRequest {
    
    const filterSensitiveLog: (obj: SendRawEmailRequest) => any;
}

export interface SendRawEmailResponse {
    
    MessageId: string | undefined;
}
export declare namespace SendRawEmailResponse {
    
    const filterSensitiveLog: (obj: SendRawEmailResponse) => any;
}

export interface SendTemplatedEmailRequest {
    
    Source: string | undefined;
    
    Destination: Destination | undefined;
    
    ReplyToAddresses?: string[];
    
    ReturnPath?: string;
    
    SourceArn?: string;
    
    ReturnPathArn?: string;
    
    Tags?: MessageTag[];
    
    ConfigurationSetName?: string;
    
    Template: string | undefined;
    
    TemplateArn?: string;
    
    TemplateData: string | undefined;
}
export declare namespace SendTemplatedEmailRequest {
    
    const filterSensitiveLog: (obj: SendTemplatedEmailRequest) => any;
}
export interface SendTemplatedEmailResponse {
    
    MessageId: string | undefined;
}
export declare namespace SendTemplatedEmailResponse {
    
    const filterSensitiveLog: (obj: SendTemplatedEmailResponse) => any;
}

export interface SetActiveReceiptRuleSetRequest {
    
    RuleSetName?: string;
}
export declare namespace SetActiveReceiptRuleSetRequest {
    
    const filterSensitiveLog: (obj: SetActiveReceiptRuleSetRequest) => any;
}

export interface SetActiveReceiptRuleSetResponse {
}
export declare namespace SetActiveReceiptRuleSetResponse {
    
    const filterSensitiveLog: (obj: SetActiveReceiptRuleSetResponse) => any;
}

export interface SetIdentityDkimEnabledRequest {
    
    Identity: string | undefined;
    
    DkimEnabled: boolean | undefined;
}
export declare namespace SetIdentityDkimEnabledRequest {
    
    const filterSensitiveLog: (obj: SetIdentityDkimEnabledRequest) => any;
}

export interface SetIdentityDkimEnabledResponse {
}
export declare namespace SetIdentityDkimEnabledResponse {
    
    const filterSensitiveLog: (obj: SetIdentityDkimEnabledResponse) => any;
}

export interface SetIdentityFeedbackForwardingEnabledRequest {
    
    Identity: string | undefined;
    
    ForwardingEnabled: boolean | undefined;
}
export declare namespace SetIdentityFeedbackForwardingEnabledRequest {
    
    const filterSensitiveLog: (obj: SetIdentityFeedbackForwardingEnabledRequest) => any;
}

export interface SetIdentityFeedbackForwardingEnabledResponse {
}
export declare namespace SetIdentityFeedbackForwardingEnabledResponse {
    
    const filterSensitiveLog: (obj: SetIdentityFeedbackForwardingEnabledResponse) => any;
}

export interface SetIdentityHeadersInNotificationsEnabledRequest {
    
    Identity: string | undefined;
    
    NotificationType: NotificationType | string | undefined;
    
    Enabled: boolean | undefined;
}
export declare namespace SetIdentityHeadersInNotificationsEnabledRequest {
    
    const filterSensitiveLog: (obj: SetIdentityHeadersInNotificationsEnabledRequest) => any;
}

export interface SetIdentityHeadersInNotificationsEnabledResponse {
}
export declare namespace SetIdentityHeadersInNotificationsEnabledResponse {
    
    const filterSensitiveLog: (obj: SetIdentityHeadersInNotificationsEnabledResponse) => any;
}

export interface SetIdentityMailFromDomainRequest {
    
    Identity: string | undefined;
    
    MailFromDomain?: string;
    
    BehaviorOnMXFailure?: BehaviorOnMXFailure | string;
}
export declare namespace SetIdentityMailFromDomainRequest {
    
    const filterSensitiveLog: (obj: SetIdentityMailFromDomainRequest) => any;
}

export interface SetIdentityMailFromDomainResponse {
}
export declare namespace SetIdentityMailFromDomainResponse {
    
    const filterSensitiveLog: (obj: SetIdentityMailFromDomainResponse) => any;
}

export interface SetIdentityNotificationTopicRequest {
    
    Identity: string | undefined;
    
    NotificationType: NotificationType | string | undefined;
    
    SnsTopic?: string;
}
export declare namespace SetIdentityNotificationTopicRequest {
    
    const filterSensitiveLog: (obj: SetIdentityNotificationTopicRequest) => any;
}

export interface SetIdentityNotificationTopicResponse {
}
export declare namespace SetIdentityNotificationTopicResponse {
    
    const filterSensitiveLog: (obj: SetIdentityNotificationTopicResponse) => any;
}

export interface SetReceiptRulePositionRequest {
    
    RuleSetName: string | undefined;
    
    RuleName: string | undefined;
    
    After?: string;
}
export declare namespace SetReceiptRulePositionRequest {
    
    const filterSensitiveLog: (obj: SetReceiptRulePositionRequest) => any;
}

export interface SetReceiptRulePositionResponse {
}
export declare namespace SetReceiptRulePositionResponse {
    
    const filterSensitiveLog: (obj: SetReceiptRulePositionResponse) => any;
}
export interface TestRenderTemplateRequest {
    
    TemplateName: string | undefined;
    
    TemplateData: string | undefined;
}
export declare namespace TestRenderTemplateRequest {
    
    const filterSensitiveLog: (obj: TestRenderTemplateRequest) => any;
}
export interface TestRenderTemplateResponse {
    
    RenderedTemplate?: string;
}
export declare namespace TestRenderTemplateResponse {
    
    const filterSensitiveLog: (obj: TestRenderTemplateResponse) => any;
}

export interface UpdateAccountSendingEnabledRequest {
    
    Enabled?: boolean;
}
export declare namespace UpdateAccountSendingEnabledRequest {
    
    const filterSensitiveLog: (obj: UpdateAccountSendingEnabledRequest) => any;
}

export interface UpdateConfigurationSetEventDestinationRequest {
    
    ConfigurationSetName: string | undefined;
    
    EventDestination: EventDestination | undefined;
}
export declare namespace UpdateConfigurationSetEventDestinationRequest {
    
    const filterSensitiveLog: (obj: UpdateConfigurationSetEventDestinationRequest) => any;
}

export interface UpdateConfigurationSetEventDestinationResponse {
}
export declare namespace UpdateConfigurationSetEventDestinationResponse {
    
    const filterSensitiveLog: (obj: UpdateConfigurationSetEventDestinationResponse) => any;
}

export interface UpdateConfigurationSetReputationMetricsEnabledRequest {
    
    ConfigurationSetName: string | undefined;
    
    Enabled: boolean | undefined;
}
export declare namespace UpdateConfigurationSetReputationMetricsEnabledRequest {
    
    const filterSensitiveLog: (obj: UpdateConfigurationSetReputationMetricsEnabledRequest) => any;
}

export interface UpdateConfigurationSetSendingEnabledRequest {
    
    ConfigurationSetName: string | undefined;
    
    Enabled: boolean | undefined;
}
export declare namespace UpdateConfigurationSetSendingEnabledRequest {
    
    const filterSensitiveLog: (obj: UpdateConfigurationSetSendingEnabledRequest) => any;
}

export interface UpdateConfigurationSetTrackingOptionsRequest {
    
    ConfigurationSetName: string | undefined;
    
    TrackingOptions: TrackingOptions | undefined;
}
export declare namespace UpdateConfigurationSetTrackingOptionsRequest {
    
    const filterSensitiveLog: (obj: UpdateConfigurationSetTrackingOptionsRequest) => any;
}

export interface UpdateConfigurationSetTrackingOptionsResponse {
}
export declare namespace UpdateConfigurationSetTrackingOptionsResponse {
    
    const filterSensitiveLog: (obj: UpdateConfigurationSetTrackingOptionsResponse) => any;
}

export interface UpdateCustomVerificationEmailTemplateRequest {
    
    TemplateName: string | undefined;
    
    FromEmailAddress?: string;
    
    TemplateSubject?: string;
    
    TemplateContent?: string;
    
    SuccessRedirectionURL?: string;
    
    FailureRedirectionURL?: string;
}
export declare namespace UpdateCustomVerificationEmailTemplateRequest {
    
    const filterSensitiveLog: (obj: UpdateCustomVerificationEmailTemplateRequest) => any;
}

export interface UpdateReceiptRuleRequest {
    
    RuleSetName: string | undefined;
    
    Rule: ReceiptRule | undefined;
}
export declare namespace UpdateReceiptRuleRequest {
    
    const filterSensitiveLog: (obj: UpdateReceiptRuleRequest) => any;
}

export interface UpdateReceiptRuleResponse {
}
export declare namespace UpdateReceiptRuleResponse {
    
    const filterSensitiveLog: (obj: UpdateReceiptRuleResponse) => any;
}
export interface UpdateTemplateRequest {
    
    Template: Template | undefined;
}
export declare namespace UpdateTemplateRequest {
    
    const filterSensitiveLog: (obj: UpdateTemplateRequest) => any;
}
export interface UpdateTemplateResponse {
}
export declare namespace UpdateTemplateResponse {
    
    const filterSensitiveLog: (obj: UpdateTemplateResponse) => any;
}

export interface VerifyDomainDkimRequest {
    
    Domain: string | undefined;
}
export declare namespace VerifyDomainDkimRequest {
    
    const filterSensitiveLog: (obj: VerifyDomainDkimRequest) => any;
}

export interface VerifyDomainDkimResponse {
    
    DkimTokens: string[] | undefined;
}
export declare namespace VerifyDomainDkimResponse {
    
    const filterSensitiveLog: (obj: VerifyDomainDkimResponse) => any;
}

export interface VerifyDomainIdentityRequest {
    
    Domain: string | undefined;
}
export declare namespace VerifyDomainIdentityRequest {
    
    const filterSensitiveLog: (obj: VerifyDomainIdentityRequest) => any;
}

export interface VerifyDomainIdentityResponse {
    
    VerificationToken: string | undefined;
}
export declare namespace VerifyDomainIdentityResponse {
    
    const filterSensitiveLog: (obj: VerifyDomainIdentityResponse) => any;
}

export interface VerifyEmailAddressRequest {
    
    EmailAddress: string | undefined;
}
export declare namespace VerifyEmailAddressRequest {
    
    const filterSensitiveLog: (obj: VerifyEmailAddressRequest) => any;
}

export interface VerifyEmailIdentityRequest {
    
    EmailAddress: string | undefined;
}
export declare namespace VerifyEmailIdentityRequest {
    
    const filterSensitiveLog: (obj: VerifyEmailIdentityRequest) => any;
}

export interface VerifyEmailIdentityResponse {
}
export declare namespace VerifyEmailIdentityResponse {
    
    const filterSensitiveLog: (obj: VerifyEmailIdentityResponse) => any;
}
